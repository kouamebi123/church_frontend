{"version":3,"file":"static/js/122.58fe7b21.chunk.js","mappings":"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","sources":["pages/Profile.js","services/preferencesService.js","services/preferencesApiService.js","components/UserPreferences.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { handleApiError } from '../utils/errorHandler';\nimport { useSelector, useDispatch } from 'react-redux';\nimport {\n  Container,\n  Paper,\n  Typography,\n  TextField,\n  Button,\n  Grid,\n  Avatar,\n  Box,\n  Divider,\n  Alert,\n  IconButton,\n  InputAdornment,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  FormHelperText,\n  Tabs,\n  Tab,\n  Fab,\n  Badge,\n  CircularProgress\n} from '@mui/material';\nimport { Visibility, VisibilityOff, Edit, PhotoCamera, Delete } from '@mui/icons-material';\nimport { updateUserProfile } from '../features/auth/authSlice';\nimport { authService } from '../services/authService';\nimport { apiService } from '../services/apiService';\nimport { toast } from 'react-toastify';\nimport { \n  TRANCHE_AGE_OPTIONS, \n  GENRE_OPTIONS, \n  SITUATION_MATRIMONIALE_OPTIONS, \n  NIVEAU_EDUCATION_OPTIONS\n} from '../constants/enums';\nimport { COUNTRIES } from '../constants/countries';\nimport { useInitialData } from '../hooks/useInitialData';\nimport UserPreferences from '../components/UserPreferences';\nimport i18nService from '../services/i18nService';\nimport { useLanguageThemeSync } from '../hooks/useLanguageThemeSync';\n\nconst Profile = () => {\n  const dispatch = useDispatch();\n  const { user } = useSelector((state) => state.auth);\n  \n  // État pour le profil\n  const [formData, setFormData] = useState({\n    username: '',\n    email: '',\n    pseudo: ''\n  });\n\n  // Initialiser le service i18n\n  useEffect(() => {\n    i18nService.init();\n  }, []);\n\n  // Utiliser le hook de synchronisation\n  const lastUpdate = useLanguageThemeSync();\n\n  // useEffect pour initialiser les données du profil\n  useEffect(() => {\n    if (user) {\n      setFormData({\n        username: user.username || '',\n        email: user.email || '',\n        pseudo: user.pseudo || ''\n      });\n    }\n  }, [user]);\n\n  // État pour le changement de mot de passe\n  const [passwordData, setPasswordData] = useState({\n    currentPassword: '',\n    newPassword: '',\n    confirmPassword: ''\n  });\n\n  // États pour la visibilité des mots de passe\n  const [showCurrentPassword, setShowCurrentPassword] = useState(false);\n  const [showNewPassword, setShowNewPassword] = useState(false);\n  const [showConfirmPassword, setShowConfirmPassword] = useState(false);\n\n  // États pour la gestion des erreurs\n  const [passwordErrors, setPasswordErrors] = useState({});\n  const [isChangingPassword, setIsChangingPassword] = useState(false);\n\n  // États pour le modal de modification complète\n  const [editModalOpen, setEditModalOpen] = useState(false);\n  const [isUpdating, setIsUpdating] = useState(false);\n  \n  // États pour l'upload d'image de profil\n  const [imageUploadDialog, setImageUploadDialog] = useState(false);\n  const [selectedImage, setSelectedImage] = useState(null);\n  const [imagePreview, setImagePreview] = useState(null);\n  const [isUploadingImage, setIsUploadingImage] = useState(false);\n  const [completeProfileData, setCompleteProfileData] = useState({\n    username: '',\n    pseudo: '',\n    email: '',\n    genre: '',\n    tranche_age: '',\n    profession: '',\n    ville_residence: '',\n    origine: '',\n    situation_matrimoniale: '',\n    niveau_education: '',\n    telephone: '',\n    adresse: '',\n    image: '',\n    departement_id: '',\n    eglise_locale_id: ''\n  });\n\n  // États pour les listes de référence\n  const { churches, departments, loading: dataLoading } = useInitialData();\n  \n  // État pour les onglets\n  const [activeTab, setActiveTab] = useState(0);\n\n  // useEffect pour initialiser les données du profil complet\n  useEffect(() => {\n    if (user) {\n      setCompleteProfileData({\n        username: user.username || '',\n        pseudo: user.pseudo || '',\n        email: user.email || '',\n        genre: user.genre || '',\n        tranche_age: user.tranche_age || '',\n        profession: user.profession || '',\n        ville_residence: user.ville_residence || '',\n        origine: user.origine || '',\n        situation_matrimoniale: user.situation_matrimoniale || '',\n        niveau_education: user.niveau_education || '',\n        telephone: user.telephone || '',\n        adresse: user.adresse || '',\n        image: user.image || '',\n        departement_id: user.departement_id || '',\n        eglise_locale_id: user.eglise_locale_id || user.eglise_locale?.id || ''\n      });\n    }\n  }, [user]);\n\n  const handleChange = (e) => {\n    setFormData({\n      ...formData,\n      [e.target.name]: e.target.value\n    });\n  };\n\n  const handlePasswordChange = (e) => {\n    setPasswordData({\n      ...passwordData,\n      [e.target.name]: e.target.value\n    });\n    // Effacer les erreurs quand l'utilisateur tape\n    if (passwordErrors[e.target.name]) {\n      setPasswordErrors({\n        ...passwordErrors,\n        [e.target.name]: ''\n      });\n    }\n  };\n\n  const handleCompleteProfileChange = (e) => {\n    setCompleteProfileData({\n      ...completeProfileData,\n      [e.target.name]: e.target.value\n    });\n  };\n\n  // Fonctions pour l'upload d'image de profil\n  const handleImageSelect = (event) => {\n    const file = event.target.files[0];\n    if (file) {\n      // Vérifier le type de fichier\n      if (!file.type.startsWith('image/')) {\n        toast.error(i18nService.t('profile.image.invalidFileType'));\n        return;\n      }\n      \n      // Vérifier la taille (max 5MB)\n      if (file.size > 5 * 1024 * 1024) {\n        toast.error(i18nService.t('profile.image.fileTooLarge'));\n        return;\n      }\n\n      setSelectedImage(file);\n      \n      // Créer une prévisualisation\n      const reader = new FileReader();\n      reader.onload = (e) => {\n        setImagePreview(e.target.result);\n      };\n      reader.readAsDataURL(file);\n      \n      setImageUploadDialog(true);\n    }\n    \n    // Réinitialiser la valeur pour permettre la sélection du même fichier\n    event.target.value = '';\n  };\n\n  // Fonction pour déclencher la sélection de fichier\n  const triggerFileSelect = () => {\n    const input = document.getElementById('profile-image-input');\n    if (input) {\n      input.click();\n    } else {\n      console.error('Input file non trouvé');\n      toast.error('Erreur: Impossible d\\'accéder au sélecteur de fichiers');\n    }\n  };\n\n  const handleImageUpload = async () => {\n    if (!selectedImage) return;\n\n    setIsUploadingImage(true);\n    try {\n      const formData = new FormData();\n      formData.append('image', selectedImage);\n\n      const response = await apiService.users.uploadProfileImage(formData);\n      \n      // Axios retourne la réponse dans response.data\n      if (response.data && response.data.success) {\n        // Mettre à jour l'utilisateur dans le store\n        dispatch(updateUserProfile({ image: response.data.data.image }));\n        toast.success(i18nService.t('profile.image.uploadSuccess'));\n        setImageUploadDialog(false);\n        setSelectedImage(null);\n        setImagePreview(null);\n      } else {\n        toast.error(response.data?.message || i18nService.t('profile.image.uploadError'));\n      }\n    } catch (error) {\n      toast.error(i18nService.t('profile.image.uploadError'));\n    } finally {\n      setIsUploadingImage(false);\n    }\n  };\n\n  const handleRemoveImage = async () => {\n    try {\n      const response = await apiService.users.removeProfileImage();\n      \n      // Axios retourne la réponse dans response.data\n      if (response.data && response.data.success) {\n        dispatch(updateUserProfile({ image: '' }));\n        toast.success(i18nService.t('profile.image.removeSuccess'));\n      } else {\n        toast.error(response.data?.message || i18nService.t('profile.image.removeError'));\n      }\n    } catch (error) {\n      toast.error(i18nService.t('profile.image.removeError'));\n    }\n  };\n\n  const handleCloseImageDialog = () => {\n    setImageUploadDialog(false);\n    setSelectedImage(null);\n    setImagePreview(null);\n  };\n\n  const validatePasswordForm = () => {\n    const errors = {};\n\n    if (!passwordData.currentPassword) {\n      errors.currentPassword = i18nService.t('errors.validation.currentPasswordRequired');\n    }\n\n    if (!passwordData.newPassword) {\n      errors.newPassword = i18nService.t('errors.validation.newPasswordRequired');\n    } else if (passwordData.newPassword.length < 6) {\n      errors.newPassword = i18nService.t('errors.validation.passwordMinLength');\n    }\n\n    if (!passwordData.confirmPassword) {\n      errors.confirmPassword = i18nService.t('errors.validation.confirmPasswordRequired');\n    } else if (passwordData.newPassword !== passwordData.confirmPassword) {\n      errors.confirmPassword = i18nService.t('errors.validation.passwordMismatch');\n    }\n\n    if (passwordData.currentPassword === passwordData.newPassword) {\n      errors.newPassword = i18nService.t('errors.validation.passwordMustBeDifferent');\n    }\n\n    setPasswordErrors(errors);\n    return Object.keys(errors).length === 0;\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    try {\n      await dispatch(updateUserProfile(formData)).unwrap();\n      toast.success(i18nService.t('success.profileUpdated'));\n    } catch (error) {\n      toast.error(error.message || i18nService.t('errors.api.updateProfile'));\n    }\n  };\n\n  const handlePasswordSubmit = async (e) => {\n    e.preventDefault();\n    \n    if (!validatePasswordForm()) {\n      return;\n    }\n\n    setIsChangingPassword(true);\n    try {\n      await authService.updatePassword({\n        currentPassword: passwordData.currentPassword,\n        newPassword: passwordData.newPassword\n      });\n      \n      toast.success(i18nService.t('success.passwordChanged'));\n      \n      // Réinitialiser le formulaire\n      setPasswordData({\n        currentPassword: '',\n        newPassword: '',\n        confirmPassword: ''\n      });\n      \n      // Effacer les erreurs\n      setPasswordErrors({});\n      \n    } catch (error) {\n      toast.error(error.message || i18nService.t('errors.api.changePassword'));\n    } finally {\n      setIsChangingPassword(false);\n    }\n  };\n\n  const handleOpenEditModal = () => {\n    // Recharger les données à chaque ouverture pour éviter les champs vides\n    if (user) {\n      setCompleteProfileData({\n        username: user.username || '',\n        pseudo: user.pseudo || '',\n        email: user.email || '',\n        genre: user.genre || '',\n        tranche_age: user.tranche_age || '',\n        profession: user.profession || '',\n        ville_residence: user.ville_residence || '',\n        origine: user.origine || '',\n        situation_matrimoniale: user.situation_matrimoniale || '',\n        niveau_education: user.niveau_education || '',\n        telephone: user.telephone || '',\n        adresse: user.adresse || '',\n        departement_id: user.departement_id || '',\n        eglise_locale_id: user.eglise_locale_id || user.eglise_locale?.id || ''\n      });\n    }\n    setEditModalOpen(true);\n  };\n\n  const handleCloseEditModal = () => {\n    setEditModalOpen(false);\n    // Ne pas vider les données pour éviter les problèmes de réouverture\n    // Les données seront rechargées à la prochaine ouverture\n  };\n\n  const handleCompleteProfileSubmit = async (e) => {\n    e.preventDefault();\n    setIsUpdating(true);\n    \n    try {\n      await apiService.users.updateProfile(completeProfileData);\n      toast.success(i18nService.t('success.profileCompleteUpdated'));\n      \n      // Mettre à jour le store Redux avec les nouvelles données\n      dispatch(updateUserProfile({\n        username: completeProfileData.username,\n        pseudo: completeProfileData.pseudo,\n        email: completeProfileData.email\n      }));\n      \n      // Mettre à jour l'état local avec les nouvelles données\n      setFormData({\n        username: completeProfileData.username,\n        email: completeProfileData.email,\n        pseudo: completeProfileData.pseudo\n      });\n      \n      handleCloseEditModal();\n    } catch (error) {\n      // Utiliser le message sécurisé de notre système d'erreur\n      const processedError = handleApiError(error, 'la mise à jour du profil complet');\n      toast.error(processedError.message);\n    } finally {\n      setIsUpdating(false);\n    }\n  };\n\n  return (\n    <Container maxWidth=\"md\">\n      {/* En-tête du profil */}\n      <Paper elevation={3} sx={{ p: 4, mt: 4, mb: 4 }}>\n        <Box display=\"flex\" flexDirection=\"column\" alignItems=\"center\" mb={4}>\n          <Box sx={{ position: 'relative', mb: 2 }}>\n            <Badge\n              overlap=\"circular\"\n              anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}\n              badgeContent={\n                <Fab\n                  size=\"small\"\n                  color=\"primary\"\n                  aria-label={i18nService.t('profile.image.changePhoto')}\n                  onClick={triggerFileSelect}\n                  sx={{\n                    width: 32,\n                    height: 32,\n                    '&:hover': {\n                      transform: 'scale(1.1)',\n                      transition: 'transform 0.2s'\n                    }\n                  }}\n                >\n                  <PhotoCamera sx={{ fontSize: 16 }} />\n                </Fab>\n              }\n            >\n              <Avatar\n                src={user?.image ? `${process.env.REACT_APP_API_URL || 'http://localhost:5001'}/${user.image}` : undefined}\n                sx={{\n                  width: 100,\n                  height: 100,\n                  bgcolor: 'primary.main',\n                  cursor: 'pointer',\n                  '&:hover': {\n                    opacity: 0.8,\n                    transition: 'opacity 0.2s'\n                  }\n                }}\n                onClick={triggerFileSelect}\n                onError={(e) => {\n                }}\n              >\n                {user?.username?.charAt(0)?.toUpperCase()}\n              </Avatar>\n            </Badge>\n            \n            {/* Bouton de suppression d'image (visible seulement si une image existe) */}\n            {user?.image && (\n              <IconButton\n                size=\"small\"\n                color=\"error\"\n                onClick={handleRemoveImage}\n                sx={{\n                  position: 'absolute',\n                  top: -8,\n                  left: -8,\n                  bgcolor: 'white',\n                  border: '2px solid',\n                  borderColor: 'error.main',\n                  '&:hover': {\n                    bgcolor: 'error.light',\n                    color: 'white'\n                  }\n                }}\n              >\n                <Delete sx={{ fontSize: 16 }} />\n              </IconButton>\n            )}\n          </Box>\n          \n          {/* Input file caché - approche plus robuste */}\n          <input\n            id=\"profile-image-input\"\n            type=\"file\"\n            accept=\"image/*\"\n            onChange={handleImageSelect}\n            style={{ display: 'none' }}\n          />\n          \n          <Typography variant=\"h5\" gutterBottom>\n            {i18nService.t('profile.title')}\n          </Typography>\n        </Box>\n\n        {/* Onglets */}\n        <Box sx={{ borderBottom: 1, borderColor: 'divider', mb: 3 }}>\n          <Tabs \n            value={activeTab} \n            onChange={(e, newValue) => setActiveTab(newValue)}\n            aria-label={i18nService.t('profile.tabs.informations')}\n            centered\n          >\n            <Tab label={i18nService.t('profile.tabs.informations')} />\n            <Tab label={i18nService.t('profile.tabs.preferences')} />\n            <Tab label={i18nService.t('profile.tabs.security')} />\n          </Tabs>\n        </Box>\n\n        {/* Contenu des onglets */}\n        {activeTab === 0 && (\n          <Box>\n            {/* Contenu de l'onglet Informations */}\n            {!user ? (\n              <Box display=\"flex\" justifyContent=\"center\" p={4}>\n                <Typography variant=\"body1\" color=\"text.secondary\">\n                  {i18nService.t('profile.loading')}\n                </Typography>\n              </Box>\n            ) : (\n              <form onSubmit={handleSubmit}>\n                <Grid container spacing={3}>\n                  <Grid xs={12}>\n                    <TextField\n                      fullWidth\n                      label={i18nService.t('profile.basicInfo.username')}\n                      name=\"username\"\n                      value={formData.username}\n                      onChange={handleChange}\n                    />\n                  </Grid>\n                  <Grid xs={12}>\n                    <TextField\n                      fullWidth\n                      label={i18nService.t('profile.basicInfo.pseudo')}\n                      name=\"pseudo\"\n                      value={formData.pseudo}\n                      onChange={handleChange}\n                    />\n                  </Grid>\n                  <Grid xs={12}>\n                    <TextField\n                      fullWidth\n                      label={i18nService.t('profile.basicInfo.email')}\n                      name=\"email\"\n                      type=\"email\"\n                      value={formData.email}\n                      onChange={handleChange}\n                    />\n                  </Grid>\n                  <Grid xs={12}>\n                    <Button\n                      type=\"submit\"\n                      variant=\"contained\"\n                      color=\"primary\"\n                      fullWidth\n                      size=\"large\"\n                    >\n                      {i18nService.t('profile.basicInfo.updateButton')}\n                    </Button>\n                  </Grid>\n                </Grid>\n              </form>\n            )}\n\n            <Divider sx={{ my: 3 }} />\n\n            {/* Bouton pour modifier le profil complet */}\n            <Box display=\"flex\" justifyContent=\"center\">\n              <Button\n                variant=\"outlined\"\n                color=\"secondary\"\n                size=\"large\"\n                startIcon={<Edit />}\n                onClick={handleOpenEditModal}\n                sx={{ minWidth: 250 }}\n              >\n                {i18nService.t('profile.basicInfo.editCompleteButton')}\n              </Button>\n            </Box>\n          </Box>\n        )}\n\n        {/* Onglet Préférences */}\n        {activeTab === 1 && (\n          <UserPreferences />\n        )}\n\n                {/* Onglet Sécurité */}\n        {activeTab === 2 && (\n          <Box>\n            <Typography variant=\"h6\" gutterBottom sx={{ mb: 3, color: 'primary.main' }}>\n              {i18nService.t('profile.security.title')}\n            </Typography>\n\n        <form onSubmit={handlePasswordSubmit}>\n          <Grid container spacing={3}>\n            <Grid xs={12}>\n              <TextField\n                fullWidth\n                label={i18nService.t('profile.security.currentPassword')}\n                name=\"currentPassword\"\n                type={showCurrentPassword ? 'text' : 'password'}\n                value={passwordData.currentPassword}\n                onChange={handlePasswordChange}\n                error={!!passwordErrors.currentPassword}\n                helperText={passwordErrors.currentPassword}\n                InputProps={{\n                  endAdornment: (\n                    <InputAdornment position=\"end\">\n                      <IconButton\n                        onClick={() => setShowCurrentPassword(!showCurrentPassword)}\n                        edge=\"end\"\n                      >\n                        {showCurrentPassword ? <VisibilityOff /> : <Visibility />}\n                      </IconButton>\n                    </InputAdornment>\n                  ),\n                }}\n              />\n            </Grid>\n            \n            <Grid xs={12} md={6}>\n              <TextField\n                fullWidth\n                label={i18nService.t('profile.security.newPassword')}\n                name=\"newPassword\"\n                type={showNewPassword ? 'text' : 'password'}\n                value={passwordData.newPassword}\n                onChange={handlePasswordChange}\n                error={!!passwordErrors.newPassword}\n                helperText={passwordErrors.newPassword}\n                InputProps={{\n                  endAdornment: (\n                    <InputAdornment position=\"end\">\n                      <IconButton\n                        onClick={() => setShowNewPassword(!showNewPassword)}\n                        edge=\"end\"\n                      >\n                        {showNewPassword ? <VisibilityOff /> : <Visibility />}\n                      </IconButton>\n                    </InputAdornment>\n                  ),\n                }}\n              />\n            </Grid>\n            \n            <Grid xs={12} md={6}>\n              <TextField\n                fullWidth\n                label={i18nService.t('profile.security.confirmPassword')}\n                name=\"confirmPassword\"\n                type={showConfirmPassword ? 'text' : 'password'}\n                value={passwordData.confirmPassword}\n                onChange={handlePasswordChange}\n                error={!!passwordErrors.confirmPassword}\n                helperText={passwordErrors.confirmPassword}\n                InputProps={{\n                  endAdornment: (\n                    <InputAdornment position=\"end\">\n                      <IconButton\n                        onClick={() => setShowConfirmPassword(!showConfirmPassword)}\n                        edge=\"end\"\n                      >\n                        {showConfirmPassword ? <VisibilityOff /> : <Visibility />}\n                      </IconButton>\n                    </InputAdornment>\n                  ),\n                }}\n              />\n            </Grid>\n\n            <Grid xs={12}>\n              <Alert severity=\"info\" sx={{ mb: 2 }}>\n                {i18nService.t('profile.security.passwordInfo')}\n              </Alert>\n            </Grid>\n\n            <Grid xs={12}>\n              <Button\n                type=\"submit\"\n                variant=\"contained\"\n                color=\"secondary\"\n                fullWidth\n                size=\"large\"\n                disabled={isChangingPassword}\n              >\n                {isChangingPassword ? i18nService.t('common.actions.processing') : i18nService.t('profile.security.changePasswordButton')}\n              </Button>\n            </Grid>\n          </Grid>\n        </form>\n          </Box>\n        )}\n      </Paper>\n\n      {/* Modal de modification complète du profil */}\n      <Dialog \n        open={editModalOpen} \n        onClose={handleCloseEditModal}\n        maxWidth=\"md\"\n        fullWidth\n      >\n        <DialogTitle>\n          {i18nService.t('profile.completeProfile.title')}\n        </DialogTitle>\n        <form onSubmit={handleCompleteProfileSubmit}>\n          <DialogContent>\n            {!completeProfileData.username ? (\n              <Box display=\"flex\" justifyContent=\"center\" p={4}>\n                <Typography variant=\"body1\" color=\"text.secondary\">\n                  {i18nService.t('profile.completeProfile.loading')}\n                </Typography>\n              </Box>\n            ) : (\n              <Grid container spacing={2}>\n              <Grid xs={12} md={6}>\n                <TextField\n                  fullWidth\n                  label={i18nService.t('profile.completeProfile.username')}\n                  name=\"username\"\n                  value={completeProfileData.username}\n                  onChange={handleCompleteProfileChange}\n                  required\n                />\n              </Grid>\n              <Grid xs={12} md={6}>\n                <TextField\n                  fullWidth\n                  label={i18nService.t('profile.completeProfile.pseudo')}\n                  name=\"pseudo\"\n                  value={completeProfileData.pseudo}\n                  onChange={handleCompleteProfileChange}\n                  required\n                />\n              </Grid>\n              <Grid xs={12} md={6}>\n                <TextField\n                  fullWidth\n                  label={i18nService.t('profile.completeProfile.email')}\n                  name=\"email\"\n                  type=\"email\"\n                  value={completeProfileData.email}\n                  onChange={handleCompleteProfileChange}\n                />\n              </Grid>\n              <Grid xs={12} md={6}>\n                <TextField\n                  fullWidth\n                  label={i18nService.t('profile.completeProfile.telephone')}\n                  name=\"telephone\"\n                  value={completeProfileData.telephone}\n                  onChange={handleCompleteProfileChange}\n                />\n              </Grid>\n              <Grid xs={12} md={6}>\n                <FormControl fullWidth required>\n                  <InputLabel>{i18nService.t('profile.completeProfile.genre')}</InputLabel>\n                  <Select\n                    name=\"genre\"\n                    value={completeProfileData.genre}\n                    onChange={handleCompleteProfileChange}\n                    label={i18nService.t('profile.completeProfile.genre')}\n                  >\n                    {GENRE_OPTIONS.map((option) => (\n                      <MenuItem key={option.value} value={option.value}>\n                        {option.label}\n                      </MenuItem>\n                    ))}\n                  </Select>\n                </FormControl>\n              </Grid>\n              <Grid xs={12} md={6}>\n                <FormControl fullWidth required>\n                  <InputLabel>{i18nService.t('profile.completeProfile.trancheAge')}</InputLabel>\n                  <Select\n                    name=\"tranche_age\"\n                    value={completeProfileData.tranche_age}\n                    onChange={handleCompleteProfileChange}\n                    label={i18nService.t('profile.completeProfile.trancheAge')}\n                  >\n                    {TRANCHE_AGE_OPTIONS.map((option) => (\n                      <MenuItem key={option.value} value={option.value}>\n                        {option.label}\n                      </MenuItem>\n                    ))}\n                  </Select>\n                </FormControl>\n              </Grid>\n              <Grid xs={12} md={6}>\n                <TextField\n                  fullWidth\n                  label={i18nService.t('profile.completeProfile.profession')}\n                  name=\"profession\"\n                  value={completeProfileData.profession}\n                  onChange={handleCompleteProfileChange}\n                  required\n                />\n              </Grid>\n              <Grid xs={12} md={6}>\n                <TextField\n                  fullWidth\n                  label={i18nService.t('profile.completeProfile.villeResidence')}\n                  name=\"ville_residence\"\n                  value={completeProfileData.ville_residence}\n                  onChange={handleCompleteProfileChange}\n                  required\n                />\n              </Grid>\n              <Grid xs={12} md={6}>\n                <FormControl fullWidth required>\n                  <InputLabel>{i18nService.t('profile.completeProfile.origine')}</InputLabel>\n                  <Select\n                    name=\"origine\"\n                    value={completeProfileData.origine}\n                    onChange={handleCompleteProfileChange}\n                    label={i18nService.t('profile.completeProfile.origine')}\n                  >\n                    {COUNTRIES.map((country) => (\n                      <MenuItem key={country.value} value={country.value}>\n                        {country.label}\n                      </MenuItem>\n                    ))}\n                  </Select>\n                </FormControl>\n              </Grid>\n\n              <Grid xs={12} md={6}>\n                <FormControl fullWidth required>\n                  <InputLabel>{i18nService.t('profile.completeProfile.situationMatrimoniale')}</InputLabel>\n                  <Select\n                    name=\"situation_matrimoniale\"\n                    value={completeProfileData.situation_matrimoniale}\n                    onChange={handleCompleteProfileChange}\n                    label={i18nService.t('profile.completeProfile.situationMatrimoniale')}\n                  >\n                    {SITUATION_MATRIMONIALE_OPTIONS.map((option) => (\n                      <MenuItem key={option.value} value={option.value}>\n                        {option.label}\n                      </MenuItem>\n                    ))}\n                  </Select>\n                </FormControl>\n              </Grid>\n              <Grid xs={12} md={6}>\n                <FormControl fullWidth required>\n                  <InputLabel>{i18nService.t('profile.completeProfile.niveauEducation')}</InputLabel>\n                  <Select\n                    name=\"niveau_education\"\n                    value={completeProfileData.niveau_education}\n                    onChange={handleCompleteProfileChange}\n                    label={i18nService.t('profile.completeProfile.niveauEducation')}\n                  >\n                    {NIVEAU_EDUCATION_OPTIONS.map((option) => (\n                      <MenuItem key={option.value} value={option.value}>\n                        {option.label}\n                      </MenuItem>\n                    ))}\n                  </Select>\n                </FormControl>\n              </Grid>\n              <Grid xs={12} md={6}>\n                <FormControl fullWidth sx={{ minWidth: 180 }}>\n                  <InputLabel>{i18nService.t('profile.completeProfile.departement')}</InputLabel>\n                  <Select\n                    name=\"departement_id\"\n                    value={completeProfileData.departement_id || ''}\n                    onChange={handleCompleteProfileChange}\n                    label={i18nService.t('profile.completeProfile.departement')}\n                    disabled={dataLoading}\n                  >\n                    <MenuItem value=\"\">\n                      <em>{i18nService.t('profile.completeProfile.noDepartement')}</em>\n                    </MenuItem>\n                    {Array.isArray(departments) && departments.map((dept) => (\n                      <MenuItem key={dept.id} value={dept.id}>\n                        {dept.nom}\n                      </MenuItem>\n                    ))}\n                  </Select>\n                </FormControl>\n              </Grid>\n              <Grid xs={12} md={6}>\n                <TextField\n                  fullWidth\n                  label={i18nService.t('profile.completeProfile.adresse')}\n                  name=\"adresse\"\n                  value={completeProfileData.adresse}\n                  onChange={handleCompleteProfileChange}\n                  multiline\n                  rows={3}\n                />\n              </Grid>\n            </Grid>\n            )}\n            \n            <Alert severity=\"info\" sx={{ mt: 2 }}>\n              <strong>Note :</strong> {i18nService.t('profile.completeProfile.note')}\n            </Alert>\n          </DialogContent>\n          <DialogActions>\n            <Button onClick={handleCloseEditModal} color=\"primary\">\n              {i18nService.t('common.actions.cancel')}\n            </Button>\n            <Button \n              type=\"submit\" \n              variant=\"contained\" \n              color=\"primary\"\n              disabled={isUpdating}\n            >\n              {isUpdating ? i18nService.t('common.actions.processing') : i18nService.t('common.actions.save')}\n            </Button>\n          </DialogActions>\n        </form>\n      </Dialog>\n\n      {/* Dialog de prévisualisation et confirmation d'upload d'image */}\n      <Dialog\n        open={imageUploadDialog}\n        onClose={handleCloseImageDialog}\n        maxWidth=\"sm\"\n        fullWidth\n      >\n        <DialogTitle>\n          {i18nService.t('profile.image.previewTitle')}\n        </DialogTitle>\n        <DialogContent>\n          <Box sx={{ display: 'flex', flexDirection: 'column', alignItems: 'center', gap: 2 }}>\n            {imagePreview && (\n              <Avatar\n                src={imagePreview}\n                sx={{\n                  width: 150,\n                  height: 150,\n                  border: '3px solid',\n                  borderColor: 'primary.main'\n                }}\n              />\n            )}\n            <Typography variant=\"body2\" color=\"text.secondary\" textAlign=\"center\">\n              {selectedImage?.name}\n            </Typography>\n            <Typography variant=\"caption\" color=\"text.secondary\" textAlign=\"center\">\n              {i18nService.t('profile.image.confirmUpload')}\n            </Typography>\n          </Box>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleCloseImageDialog} color=\"primary\">\n            {i18nService.t('common.actions.cancel')}\n          </Button>\n          <Button \n            onClick={handleImageUpload}\n            variant=\"contained\" \n            color=\"primary\"\n            disabled={isUploadingImage}\n            startIcon={isUploadingImage ? <CircularProgress size={16} /> : null}\n          >\n            {isUploadingImage ? i18nService.t('common.actions.uploading') : i18nService.t('common.actions.upload')}\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </Container>\n  );\n};\n\nexport default Profile;\n","// Service de gestion des préférences utilisateur\nclass PreferencesService {\n  constructor() {\n    this.storageKey = 'user_preferences';\n    this.defaultPreferences = {\n      language: 'fr',\n      theme: 'light',\n      autoTheme: true\n    };\n    this.loadPreferences();\n  }\n\n  // Charger les préférences depuis le localStorage\n  loadPreferences() {\n    try {\n      const stored = localStorage.getItem(this.storageKey);\n      if (stored) {\n        this.preferences = { ...this.defaultPreferences, ...JSON.parse(stored) };\n      } else {\n        this.preferences = { ...this.defaultPreferences };\n      }\n    } catch (error) {\n      // console.warn('Erreur lors du chargement des préférences:', error);\n      this.preferences = { ...this.defaultPreferences };\n    }\n  }\n\n  // Sauvegarder les préférences dans le localStorage\n  savePreferences() {\n    try {\n      localStorage.setItem(this.storageKey, JSON.stringify(this.preferences));\n    } catch (error) {\n      // console.error('Erreur lors de la sauvegarde des préférences:', error);\n    }\n  }\n\n  // Obtenir une préférence\n  getPreference(key) {\n    return this.preferences[key];\n  }\n\n  // Définir une préférence\n  setPreference(key, value) {\n    this.preferences[key] = value;\n    this.savePreferences();\n    this.applyPreferences();\n  }\n\n  // Obtenir toutes les préférences\n  getAllPreferences() {\n    return { ...this.preferences };\n  }\n\n  // Appliquer les préférences\n  applyPreferences() {\n    // Appliquer le thème\n    this.applyTheme();\n    \n    // Appliquer la langue\n    this.applyLanguage();\n  }\n\n  // Appliquer le thème\n  applyTheme() {\n    const { theme, autoTheme } = this.preferences;\n    \n    if (autoTheme) {\n      // Détecter automatiquement le thème système\n      const systemTheme = window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';\n      document.documentElement.setAttribute('data-theme', systemTheme);\n    } else {\n      document.documentElement.setAttribute('data-theme', theme);\n    }\n  }\n\n  // Appliquer la langue\n  applyLanguage() {\n    const { language } = this.preferences;\n    document.documentElement.setAttribute('lang', language);\n    \n    // Émettre un événement pour notifier les composants\n    window.dispatchEvent(new CustomEvent('languageChanged', { detail: { language } }));\n  }\n\n  // Écouter les changements de thème système\n  listenToSystemTheme() {\n    const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');\n    \n    mediaQuery.addEventListener('change', (e) => {\n      if (this.preferences.autoTheme) {\n        this.applyTheme();\n      }\n    });\n  }\n\n  // Initialiser le service\n  init() {\n    this.applyPreferences();\n    this.listenToSystemTheme();\n  }\n}\n\n// Instance singleton\nconst preferencesService = new PreferencesService();\n\nexport default preferencesService;\n","import authAxios from './authService';\n\n/**\n * Service pour la gestion des préférences utilisateur via l'API\n */\nclass PreferencesApiService {\n  /**\n   * Récupère les préférences de l'utilisateur connecté\n   */\n  async getPreferences() {\n    try {\n      const response = await authAxios.get('/preferences');\n      return response.data;\n    } catch (error) {\n      console.error('Erreur lors de la récupération des préférences:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Met à jour toutes les préférences\n   */\n  async updatePreferences(preferences) {\n    try {\n      const response = await authAxios.put('/preferences', preferences);\n      return response.data;\n    } catch (error) {\n      console.error('Erreur lors de la mise à jour des préférences:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Met à jour uniquement les préférences email\n   */\n  async updateEmailPreferences(email_notifications) {\n    try {\n      const response = await authAxios.put('/preferences/email', { email_notifications });\n      return response.data;\n    } catch (error) {\n      console.error('Erreur lors de la mise à jour des préférences email:', error);\n      throw error;\n    }\n  }\n}\n\nexport default new PreferencesApiService();\n\n","import React, { useState, useEffect } from 'react';\nimport {\n  Box,\n  Typography,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  Switch,\n  FormControlLabel,\n  Button,\n  Paper,\n  Grid,\n  Chip,\n  Alert,\n  Divider\n} from '@mui/material';\nimport { Language, Palette, Settings, Email } from '@mui/icons-material';\nimport { toast } from 'react-toastify';\nimport preferencesService from '../services/preferencesService';\nimport preferencesApiService from '../services/preferencesApiService';\nimport i18nService from '../services/i18nService';\n\n\nconst UserPreferences = () => {\n  const [preferences, setPreferences] = useState({\n    language: 'fr',\n    theme: 'light',\n    autoTheme: true,\n    email_notifications: true\n  });\n  const [initialPreferences, setInitialPreferences] = useState({\n    language: 'fr',\n    theme: 'light',\n    autoTheme: true,\n    email_notifications: true\n  });\n  const [isLoading, setIsLoading] = useState(false);\n  const [hasChanges, setHasChanges] = useState(false);\n  const [forceUpdate, setForceUpdate] = useState(0);\n\n  // Charger les préférences au montage du composant\n  useEffect(() => {\n    const loadPreferences = async () => {\n      try {\n        const currentLanguage = i18nService.getCurrentLanguage();\n        const autoTheme = preferencesService.getPreference('autoTheme') || true;\n        \n        // Charger les préférences depuis l'API\n        const apiPreferences = await preferencesApiService.getPreferences();\n        \n        const loadedPreferences = {\n          language: apiPreferences?.data?.language || currentLanguage,\n          theme: apiPreferences?.data?.theme || 'light',\n          autoTheme,\n          email_notifications: apiPreferences?.data?.email_notifications ?? true\n        };\n        \n        setPreferences(loadedPreferences);\n        setInitialPreferences(loadedPreferences);\n      } catch (error) {\n        console.error('Erreur lors du chargement des préférences:', error);\n        // Utiliser les valeurs par défaut en cas d'erreur\n        const currentLanguage = i18nService.getCurrentLanguage();\n        const autoTheme = preferencesService.getPreference('autoTheme') || true;\n        \n        const defaultPreferences = {\n          language: currentLanguage,\n          theme: 'light',\n          autoTheme,\n          email_notifications: true\n        };\n        \n        setPreferences(defaultPreferences);\n        setInitialPreferences(defaultPreferences);\n      }\n    };\n\n    loadPreferences();\n  }, [preferences.theme]);\n\n  // Détecter les changements\n  useEffect(() => {\n    // Comparer avec les valeurs initiales chargées\n    const hasLanguageChanged = initialPreferences.language !== preferences.language;\n    const hasThemeChanged = initialPreferences.theme !== preferences.theme;\n    const hasAutoThemeChanged = initialPreferences.autoTheme !== preferences.autoTheme;\n    const hasEmailNotificationsChanged = initialPreferences.email_notifications !== preferences.email_notifications;\n    \n    const changed = hasLanguageChanged || hasThemeChanged || hasAutoThemeChanged || hasEmailNotificationsChanged;\n    setHasChanges(changed);\n  }, [preferences, initialPreferences]);\n\n  // Forcer la synchronisation des composants après sauvegarde\n  useEffect(() => {\n    if (forceUpdate > 0) {\n      // Synchroniser les composants avec les nouveaux paramètres\n      const currentLanguage = i18nService.getCurrentLanguage();\n      \n      setPreferences(prev => ({\n        ...prev,\n        language: currentLanguage,\n        theme: prev.theme\n      }));\n    }\n  }, [forceUpdate]);\n\n  // Gérer les changements de préférences\n  const handlePreferenceChange = (key, value) => {\n    setPreferences(prev => ({\n      ...prev,\n      [key]: value\n    }));\n    \n    // Marquer qu'il y a des changements\n    setHasChanges(true);\n  };\n\n  // Sauvegarder les préférences\n  const handleSavePreferences = async () => {\n    setIsLoading(true);\n    \n    try {\n      // Appliquer tous les changements lors de la sauvegarde\n      i18nService.setLanguage(preferences.language);\n      // setTheme(preferences.theme); // DÉSACTIVÉ TEMPORAIREMENT\n      \n      // Sauvegarder via les services locaux\n      preferencesService.setPreference('autoTheme', preferences.autoTheme);\n      \n      // Sauvegarder les préférences via l'API\n      try {\n        const apiResponse = await preferencesApiService.updatePreferences({\n          email_notifications: preferences.email_notifications,\n          language: preferences.language,\n          theme: preferences.theme\n        });\n        \n        // Vérifier que la réponse API est valide\n        if (apiResponse && apiResponse.success) {\n          console.log('✅ Préférences sauvegardées avec succès via l\\'API');\n        } else {\n          console.warn('⚠️ Réponse API inattendue:', apiResponse);\n        }\n      } catch (apiError) {\n        console.error('❌ Erreur API lors de la sauvegarde des préférences:', apiError);\n        toast.error('Erreur lors de la sauvegarde sur le serveur, mais les changements locaux sont appliqués');\n        // Continuer même si l'API échoue, car les changements locaux sont déjà appliqués\n      }\n      \n      // Forcer la mise à jour des composants\n      setForceUpdate(prev => prev + 1);\n      \n      // Déclencher un événement global pour forcer la mise à jour de tous les composants\n      window.dispatchEvent(new CustomEvent('languageOrThemeChanged', {\n        detail: {\n          language: preferences.language,\n          theme: preferences.theme,\n          timestamp: Date.now()\n        }\n      }));\n      \n      toast.success(i18nService.t('success.preferencesSaved'));\n      setHasChanges(false);\n      // Mettre à jour les préférences initiales après sauvegarde\n      setInitialPreferences(preferences);\n    } catch (error) {\n      toast.error(i18nService.t('errors.general'));\n      console.error('Erreur de sauvegarde:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Réinitialiser les préférences\n  const handleResetPreferences = () => {\n    const defaultPreferences = {\n      language: 'fr',\n      theme: 'light',\n      autoTheme: true\n    };\n    \n    setPreferences(defaultPreferences);\n    \n    // Appliquer les préférences par défaut\n    i18nService.setLanguage('fr');\n    // setTheme('light'); // DÉSACTIVÉ TEMPORAIREMENT\n    \n    setHasChanges(false);\n    // Mettre à jour les préférences initiales après réinitialisation\n    setInitialPreferences(preferences);\n  };\n\n  return (\n    <Paper sx={{ p: 3, mb: 3 }}>\n      <Box display=\"flex\" alignItems=\"center\" mb={3}>\n        <Settings sx={{ mr: 2, color: 'primary.main' }} />\n        <Typography variant=\"h6\" component=\"h3\">\n          {i18nService.t('profile.preferences.title')}\n        </Typography>\n      </Box>\n\n      <Grid container spacing={3}>\n        {/* Section Langue */}\n        <Grid item xs={12} md={6}>\n          <Box>\n            <Box display=\"flex\" alignItems=\"center\" mb={2}>\n              <Language sx={{ mr: 1, color: 'primary.main' }} />\n              <Typography variant=\"subtitle1\" fontWeight=\"bold\">\n                {i18nService.t('profile.preferences.language.title')}\n              </Typography>\n            </Box>\n            \n            <FormControl fullWidth>\n              <InputLabel>\n                {i18nService.t('profile.preferences.language.title')}\n              </InputLabel>\n              <Select\n                value={preferences.language}\n                onChange={(e) => handlePreferenceChange('language', e.target.value)}\n                label={i18nService.t('profile.preferences.language.title')}\n              >\n                {i18nService.getAvailableLanguages().map((lang) => (\n                  <MenuItem key={lang.code} value={lang.code}>\n                    <Box display=\"flex\" alignItems=\"center\">\n                      <span style={{ marginRight: '8px' }}>{lang.flag}</span>\n                      <span>{lang.nativeName || lang.code.toUpperCase()}</span>\n                    </Box>\n                  </MenuItem>\n                ))}\n              </Select>\n            </FormControl>\n            \n\n          </Box>\n        </Grid>\n\n        {/* Section Notifications Email */}\n        <Grid item xs={12} md={6}>\n          <Box>\n            <Box display=\"flex\" alignItems=\"center\" mb={2}>\n              <Email sx={{ mr: 1, color: 'primary.main' }} />\n              <Typography variant=\"subtitle1\" fontWeight=\"bold\">\n                {i18nService.t('profile.preferences.email.title')}\n              </Typography>\n            </Box>\n            \n            <FormControlLabel\n              control={\n                <Switch\n                  checked={preferences.email_notifications}\n                  onChange={(e) => handlePreferenceChange('email_notifications', e.target.checked)}\n                  color=\"primary\"\n                />\n              }\n              label={\n                <Box>\n                  <Typography variant=\"body2\">\n                    {i18nService.t('profile.preferences.email.notifications')}\n                  </Typography>\n                  <Typography variant=\"caption\" color=\"text.secondary\">\n                    {i18nService.t('profile.preferences.email.description')}\n                  </Typography>\n                </Box>\n              }\n            />\n          </Box>\n        </Grid>\n\n        {/* Section Thème - DÉSACTIVÉE TEMPORAIREMENT */}\n        <Grid item xs={12} md={6}>\n          <Box>\n            <Box display=\"flex\" alignItems=\"center\" mb={2}>\n              <Palette sx={{ mr: 1, color: 'primary.main' }} />\n              <Typography variant=\"subtitle1\" fontWeight=\"bold\">\n                {i18nService.t('profile.preferences.theme.title')}\n              </Typography>\n            </Box>\n            \n            <Typography variant=\"body2\" color=\"text.secondary\" sx={{ fontStyle: 'italic' }}>\n              {i18nService.t('profile.preferences.theme.disabled')}\n            </Typography>\n          </Box>\n        </Grid>\n      </Grid>\n\n      <Divider sx={{ my: 3 }} />\n\n      {/* Actions */}\n      <Box display=\"flex\" gap={2} justifyContent=\"flex-end\">\n        <Button\n          variant=\"outlined\"\n          onClick={handleResetPreferences}\n          disabled={isLoading}\n        >\n          {i18nService.t('common.actions.reset')}\n        </Button>\n        \n        <Button\n          variant=\"contained\"\n          onClick={handleSavePreferences}\n          disabled={isLoading || !hasChanges}\n          startIcon={isLoading ? null : null}\n        >\n          {isLoading ? i18nService.t('common.actions.saving') : i18nService.t('profile.actions.savePreferences')}\n        </Button>\n      </Box>\n\n      {/* Indicateur de changements */}\n      {hasChanges && (\n        <Alert severity=\"info\" sx={{ mt: 2 }}>\n          {i18nService.t('profile.preferences.unsavedChanges')}\n        </Alert>\n      )}\n\n\n    </Paper>\n  );\n};\n\nexport default UserPreferences;\n"],"names":["Profile","_user$username","_user$username$charAt","dispatch","useDispatch","user","useSelector","state","auth","formData","setFormData","useState","username","email","pseudo","useEffect","i18nService","init","useLanguageThemeSync","passwordData","setPasswordData","currentPassword","newPassword","confirmPassword","showCurrentPassword","setShowCurrentPassword","showNewPassword","setShowNewPassword","showConfirmPassword","setShowConfirmPassword","passwordErrors","setPasswordErrors","isChangingPassword","setIsChangingPassword","editModalOpen","setEditModalOpen","isUpdating","setIsUpdating","imageUploadDialog","setImageUploadDialog","selectedImage","setSelectedImage","imagePreview","setImagePreview","isUploadingImage","setIsUploadingImage","completeProfileData","setCompleteProfileData","genre","tranche_age","profession","ville_residence","origine","situation_matrimoniale","niveau_education","telephone","adresse","image","departement_id","eglise_locale_id","churches","departments","loading","dataLoading","useInitialData","activeTab","setActiveTab","_user$eglise_locale","eglise_locale","id","handleChange","e","_objectSpread","target","name","value","handlePasswordChange","handleCompleteProfileChange","triggerFileSelect","input","document","getElementById","click","console","error","toast","handleCloseImageDialog","handleCloseEditModal","_jsxs","Container","maxWidth","children","Paper","elevation","sx","p","mt","mb","Box","display","flexDirection","alignItems","position","_jsx","Badge","overlap","anchorOrigin","vertical","horizontal","badgeContent","Fab","size","color","t","onClick","width","height","transform","transition","PhotoCamera","fontSize","Avatar","src","concat","process","undefined","bgcolor","cursor","opacity","onError","charAt","toUpperCase","IconButton","async","response","apiService","users","removeProfileImage","_response$data2","data","success","updateUserProfile","message","top","left","border","borderColor","Delete","type","accept","onChange","event","file","files","startsWith","reader","FileReader","onload","result","readAsDataURL","style","Typography","variant","gutterBottom","borderBottom","Tabs","newValue","centered","Tab","label","onSubmit","preventDefault","unwrap","Grid","container","spacing","xs","TextField","fullWidth","Button","justifyContent","Divider","my","startIcon","Edit","handleOpenEditModal","_user$eglise_locale2","minWidth","UserPreferences","validatePasswordForm","errors","length","Object","keys","authService","updatePassword","helperText","InputProps","endAdornment","InputAdornment","edge","VisibilityOff","Visibility","md","Alert","severity","disabled","Dialog","open","onClose","DialogTitle","updateProfile","processedError","handleApiError","DialogContent","required","FormControl","InputLabel","Select","GENRE_OPTIONS","map","option","MenuItem","TRANCHE_AGE_OPTIONS","COUNTRIES","country","SITUATION_MATRIMONIALE_OPTIONS","NIVEAU_EDUCATION_OPTIONS","Array","isArray","dept","nom","multiline","rows","DialogActions","gap","textAlign","FormData","append","uploadProfileImage","_response$data","CircularProgress","constructor","this","storageKey","defaultPreferences","language","theme","autoTheme","loadPreferences","stored","localStorage","getItem","preferences","JSON","parse","savePreferences","setItem","stringify","getPreference","key","setPreference","applyPreferences","getAllPreferences","applyTheme","applyLanguage","systemTheme","window","matchMedia","matches","documentElement","setAttribute","dispatchEvent","CustomEvent","detail","listenToSystemTheme","addEventListener","getPreferences","authAxios","get","updatePreferences","put","updateEmailPreferences","email_notifications","setPreferences","initialPreferences","setInitialPreferences","isLoading","setIsLoading","hasChanges","setHasChanges","forceUpdate","setForceUpdate","_apiPreferences$data","_apiPreferences$data2","_apiPreferences$data$","_apiPreferences$data3","currentLanguage","getCurrentLanguage","preferencesService","apiPreferences","preferencesApiService","loadedPreferences","hasLanguageChanged","hasThemeChanged","hasAutoThemeChanged","hasEmailNotificationsChanged","prev","handlePreferenceChange","Settings","mr","component","item","Language","fontWeight","getAvailableLanguages","lang","code","marginRight","flag","nativeName","Email","FormControlLabel","control","Switch","checked","Palette","fontStyle","handleResetPreferences","setLanguage","apiResponse","log","warn","apiError","timestamp","Date","now"],"sourceRoot":""}