import{r as s}from"./mui-mRVmBbre.js";import{a as w,h}from"./index-BJrOTOVd.js";const C=(p={})=>{const[m,E]=s.useState([]),[i,n]=s.useState(!1),[y,t]=s.useState(null),d=JSON.stringify(p),c=s.useMemo(()=>p,[d]),l=s.useCallback(async(e=c)=>{try{n(!0),t(null);const r=await w.users.getAll(e);return E(r.data?.data||r.data||[]),r}catch(r){const o=h(r,"le chargement des utilisateurs");t(o.message);const g=new Error(o.message);throw g.userMessage=o.message,g}finally{n(!1)}},[c]);s.useEffect(()=>{Object.keys(c).length>0&&l()},[c,l]);const f=s.useCallback(async e=>{try{n(!0),t(null);const r=await w.users.create(e);return await l(),r}catch(r){const o=h(r,"la création de l'utilisateur"),g=new Error(o.message);throw g.userMessage=o.message,g}finally{n(!1)}},[l]),u=s.useCallback(async(e,r)=>{try{n(!0),t(null);const o=await w.users.update(e,r);return await l(),o}catch(o){const g=h(o,"la mise à jour de l'utilisateur"),k=new Error(g.message);throw k.userMessage=g.message,k}finally{n(!1)}},[l]),a=s.useCallback(async e=>{try{n(!0),t(null);const r=await w.users.delete(e);return await l(),r}catch(r){const o=h(r,"la suppression de l'utilisateur"),g=new Error(o.message);throw g.userMessage=o.message,g}finally{n(!1)}},[l]);return{users:m,loading:i,error:y,fetchUsers:l,createUser:f,updateUser:u,deleteUser:a}},v=(p={})=>{const[m,E]=s.useState([]),[i,n]=s.useState(!1),[y,t]=s.useState(null),d=s.useMemo(()=>{const{churchId:a,...e}=p;return{churchId:a||null,...e}},[p.churchId,JSON.stringify(p)]),c=s.useCallback(async(a=d)=>{try{if(n(!0),t(null),!a||!a.churchId){E([]),t(null);return}const e=await w.networks.getAll(a);if(e.data){const r=e.data.data||e.data;E(Array.isArray(r)?r:[]),t(null)}else t("Aucune donnée reçue du serveur"),E([])}catch(e){let r="Erreur lors du chargement des réseaux";e.response?r=e.response.data?.message||`Erreur ${e.response.status}: ${e.response.statusText}`:e.request?r="Erreur de connexion au serveur":r=e.message||"Erreur inconnue",t(r),E([])}finally{n(!1)}},[d]);s.useEffect(()=>{d&&d.churchId?c():(E([]),t(null))},[d,c]);const l=s.useCallback(async a=>{try{n(!0),t(null);const e=await w.networks.create(a);return await c(),e}catch(e){const r=h(e,"la création du réseau"),o=new Error(r.message);throw o.userMessage=r.message,o}finally{n(!1)}},[c]),f=s.useCallback(async(a,e)=>{try{n(!0),t(null);const r=await w.networks.update(a,e);return await c(),r}catch(r){const o=h(r,"la mise à jour du réseau"),g=new Error(o.message);throw g.userMessage=o.message,g}finally{n(!1)}},[c]),u=s.useCallback(async a=>{try{n(!0),t(null);const e=await w.networks.delete(a);return await c(),e}catch(e){const r=h(e,"la suppression du réseau"),o=new Error(r.message);throw o.userMessage=r.message,o}finally{n(!1)}},[c]);return{networks:m,loading:i,error:y,fetchNetworks:c,createNetwork:l,updateNetwork:f,deleteNetwork:u}},M=()=>{const[p,m]=s.useState([]),[E,i]=s.useState(!1),[n,y]=s.useState(null),t=s.useCallback(async()=>{try{i(!0),y(null);const d=await w.churches.getAll();return m(d.data?.data||d.data||[]),d}catch(d){const c=h(d,"Erreur lors du chargement des églises"),l=new Error(c.message);throw l.userMessage=c.message,l}finally{i(!1)}},[]);return s.useEffect(()=>{t()},[t]),{churches:p,loading:E,error:n,fetchChurches:t}},A=()=>{const[p,m]=s.useState([]),[E,i]=s.useState(!1),[n,y]=s.useState(null),t=s.useCallback(async f=>{try{i(!0),y(null);const u=await w.services.getAll(f);return m(u.data?.data||u.data||[]),u}catch(u){const a=h(u,"Erreur lors du chargement des services"),e=new Error(a.message);throw e.userMessage=a.message,e}finally{i(!1)}},[]),d=s.useCallback(async f=>{try{i(!0),y(null);const u=await w.services.create(f);return await t(),u}catch(u){const a=h(u,"Erreur lors de la création"),e=new Error(a.message);throw e.userMessage=a.message,e}finally{i(!1)}},[t]),c=s.useCallback(async(f,u)=>{try{i(!0),y(null);const a=await w.services.update(f,u);return await t(),a}catch(a){const e=h(a,"Erreur lors de la mise à jour"),r=new Error(e.message);throw r.userMessage=e.message,r}finally{i(!1)}},[t]),l=s.useCallback(async f=>{try{i(!0),y(null);const u=await w.services.delete(f);return await t(),u}catch(u){const a=h(u,"Erreur lors de la suppression"),e=new Error(a.message);throw e.userMessage=a.message,e}finally{i(!1)}},[t]);return{services:p,loading:E,error:n,fetchServices:t,createService:d,updateService:c,deleteService:l}};export{v as a,C as b,M as c,A as u};
